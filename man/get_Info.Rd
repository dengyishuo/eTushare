% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_Info.R
\name{get_Info}
\alias{get_Info}
\title{Get Stock Basic Information}
\usage{
get_Info(
  token = my_token,
  ts_code = "",
  market = "",
  list_status = "L",
  exchange = "",
  is_hs = "",
  fields = c("ts_code", "symbol", "name", "area", "industry", "market", "list_date")
)
}
\arguments{
\item{token}{Tushare API token,You can obtain it from Tushare Pro website after logging.}

\item{ts_code}{Stock code (e.g. "000001.SZ" or "600519.SH"), default empty means get all stocks}

\item{market}{Market type, optional "all"(no filter),"main"(Main Board),"gem"(GEM),"star"(STAR Market),"cdr"(CDR),"bse"(BSE), default "all" means no filter}

\item{list_status}{Listing status, "L"(Listed), "D"(Delisted), "P"(Suspended), default "L"}

\item{exchange}{Exchange, "SSE"(Shanghai), "SZSE"(Shenzhen), "BSE"(Beijing)}

\item{is_hs}{Connect program, "N"(No), "H"(SH Connect), "S"(SZ Connect)}

\item{fields}{Fields to return, default common fields}
}
\value{
Dataframe containing stock info with fields:
\describe{
  \item{ts_code}{TS stock code}
  \item{symbol}{Stock symbol}
  \item{name}{Stock name}
  \item{area}{Region}
  \item{industry}{Industry}
  \item{market}{Market type}
  \item{list_date}{Listing date}
  \item{is_hs}{Connect program flag}
  \item{fullname}{Company full name}
  \item{enname}{English name}
  \item{cnspell}{Pinyin abbreviation}
  \item{exchange}{Exchange}
  \item{curr_type}{Currency}
  \item{list_status}{Listing status}
  \item{delist_date}{Delisting date}
  \item{act_name}{Actual controller}
  \item{act_ent_type}{Controller type}
}
}
\description{
Retrieve stock basic information through Tushare API, including code, name, listing date, industry etc.
}
\examples{
\dontrun{
# Basic usage: Get all listed stocks
stock_list <- get_Info()
head(stock_list)
# Test ts_code parameter
stock_600519 <- get_Info(ts_code = "600519.SH")
head(stock_600519)
stock_000001 <- get_Info(ts_code = "000001.SZ")
head(stock_000001)
# Test market parameter combinations
main_board <- get_Info(market = "main")
head(main_board)
gem_board <- get_Info(market = "gem")
head(gem_board)
star_market <- get_Info(market = "star")
head(star_market)
# Test the list_status parameter
listed_stocks <- get_Info(list_status = "L")
head(listed_stocks)
delisted_stocks <- get_Info(list_status = "D")
head(delisted_stocks)
suspended_stocks <- get_Info(list_status = "P")
head(suspended_stocks)
# Test the exchange parameter
sse_stocks <- get_Info(exchange = "SSE")
head(sse_stocks)
szse_stocks <- get_Info(exchange = "SZSE")
head(szse_stocks)
bse_stocks <- get_Info(exchange = "BSE")
head(bse_stocks)
# Test the is_hs parameter
hs_stocks <- get_Info(is_hs = "H")
head(hs_stocks)
sz_hs_stocks <- get_Info(is_hs = "S")
head(sz_hs_stocks)
non_hs_stocks <- get_Info(is_hs = "N")
head(non_hs_stocks)
# Test the fields parameter
minimal_fields <- get_Info(fields = c("ts_code", "name"))
head(minimal_fields)
full_fields <- get_Info(fields = c(
  "ts_code", "name", "industry",
  "list_date", "market", "is_hs"
))
head(full_fields)
# Test parameter combinations
sse_hs_stocks <- get_Info(exchange = "SSE", is_hs = "H")
head(sse_hs_stocks)
gem_active_stocks <- get_Info(market = "gem", list_status = "L")
head(gem_active_stocks)
}
}
\author{
DengYishuo
}
